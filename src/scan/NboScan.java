/*
 * NboScan.java is part of the NboScan project
 * Parsing algorithm in method RawCoords [Line 1238] is based on the analogous Python version at:
 * http://verahill.blogspot.com/2013/09/514-extracting-data-form-pes-scan-with.html
 */
/*
 * The MIT License
 *
 * Copyright 2014 Marcel Patek <chemgplus at gmail.com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 *
 * @author Marcel Patek <chemgplus at gmail.com>
 * @version 1.01
 * @date June 28 2014
 * @debug Use statement log(object) to print degug info to console
 * @libraries Requires jfreechart and jcommon libraries
 */
package scan;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Insets;
import java.awt.Toolkit;
import java.io.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.EmptyBorder;

public class NboScan extends javax.swing.JFrame {

    /**
     * Creates new NboScan GUI
     */
    // variables
    String file_inp;
    String file1_nbo;
    String inp_dir;
    String baset;
    String basis;
    String metd;
    String keys;
    String user_keys;
    String output_nbo;
    String getcoord; // Line containing regex
    String scanned = ""; // Scanned coordinate
    String axisMatch;
    JFileChooser chooser;
    JFileChooser chooser1;
    String input_gau;
    String input_fname;
    String path_out;
    String suffix;
    Integer round;
    String nboread = "pop=nboread sp nosymm";
    String routecard;
    String addToRoute;
    String addComment;
    String ToOutArea;
    String message1;
    String message2;
    String message3;
    String message4;
    String message5;

    public NboScan() {
        initComponents();

        //Group radio buttons
        ButtonGroup group = new ButtonGroup();
        group.add(Ess47only);
        group.add(EssGaunbo6);
        group.add(EssGaunbo6l);
        group.add(EssGaunbo3);
        //group.clearSelection();
        EssGaunbo6l.setSelected(true);

        // Ess47only.setSelected(true); // sets permanent check
        // Before the first run, check if settings file exists
        File file = new File("nboscan_settings.xml"); // defined in Reader
        if (file.exists()) {
            //Read xml file for previous settings
            JAXBReader reader = new JAXBReader();
            inp_dir = reader.Reader1();
            file_inp = reader.Reader2();
            path_out = reader.Reader3();
            addComment = reader.Reader4();
            keys = reader.Reader5();
            user_keys = reader.Reader6();
            addToRoute = reader.Reader7();

            Directory.setText(inp_dir);
            GauDir.setText(path_out);
            Filename.setText(file_inp);
            Comment.setText(addComment);
            RouteCard.setText(addToRoute);

            Directory.setCaretPosition(0);
            Comment.setCaretPosition(0);
            RouteCard.setCaretPosition(0);
            GauDir.setCaretPosition(0);
            NboKey.setCaretPosition(0);

        } else { // Just use blank fields
            inp_dir = Directory.getText();
            path_out = GauDir.getText();
            file_inp = Filename.getText();
            addComment = Comment.getText();
            addToRoute = RouteCard.getText();
            keys = NboKey.getText();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Directory = new javax.swing.JTextField();
        OpenDir = new javax.swing.JButton();
        Filename = new javax.swing.JTextField();
        ExitBn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        BrowseHeader = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutArea = new javax.swing.JEditorPane();
        GauDir = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        LoadGauDir = new javax.swing.JButton();
        ClearAll = new javax.swing.JButton();
        Comment = new javax.swing.JTextField();
        EssBasis = new javax.swing.JComboBox();
        EssMethod = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Method = new javax.swing.JTextField();
        Basis = new javax.swing.JTextField();
        EssGaunbo6l = new javax.swing.JCheckBox();
        EssGaunbo6 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        NboKey = new javax.swing.JEditorPane();
        jLabel29 = new javax.swing.JLabel();
        RunGau = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        NboKeys = new javax.swing.JComboBox();
        Ess47only = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        UseInp = new javax.swing.JCheckBox();
        EssGaunbo3 = new javax.swing.JCheckBox();
        PlotProfile = new javax.swing.JCheckBox();
        RouteCard = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        linkman = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NBOScan 1.3");
        setIconImage(Toolkit.getDefaultToolkit().getImage(NboScan.class.getResource("/img/resources/icon20scan.png")));
        setMaximumSize(new java.awt.Dimension(480, 565));
        setPreferredSize(new java.awt.Dimension(485, 600));

        OpenDir.setText("1. Browse Dir");
        OpenDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenDirActionPerformed(evt);
            }
        });

        ExitBn.setText("Exit");
        ExitBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBnActionPerformed(evt);
            }
        });

        jLabel3.setText("Filename (autofill)");
        jLabel3.setToolTipText("Filename of LFN file(s)");

        BrowseHeader.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BrowseHeader.setText("Load directory with .out or.lis filenames");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        OutArea.setMinimumSize(new java.awt.Dimension(200, 20));
        OutArea.setPreferredSize(new java.awt.Dimension(437, 20));
        jScrollPane2.setViewportView(OutArea);

        GauDir.setToolTipText("Directory of newly created .gjf files");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Output path");
        jLabel2.setToolTipText("G03 or G09 directory");

        LoadGauDir.setText("2. Set Dir");
        LoadGauDir.setToolTipText("Directory of newly created .gjf files");
        LoadGauDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadGauDirActionPerformed(evt);
            }
        });

        ClearAll.setText("Clear text");
        ClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllActionPerformed(evt);
            }
        });

        Comment.setToolTipText("Enter comments to the .gjf file");

        EssBasis.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "6-31G(d)", "6-311++G(d,p)", "cc-pVTZ", "aug-cc-pVTZ" }));
        EssBasis.setToolTipText("Choose or change basis in LFN");
        EssBasis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EssBasisActionPerformed(evt);
            }
        });

        EssMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HF", "B3LYP", "M06-2X", "wB97XD", "MP2" }));
        EssMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EssMethodActionPerformed(evt);
            }
        });

        jLabel1.setText("/");

        jLabel4.setText("Additional comments");
        jLabel4.setToolTipText("Enter comments to the .gjf file");

        Method.setText("HF");

        Basis.setText("6-31G(d)");

        EssGaunbo6l.setText("G09-link-NBO6");
        EssGaunbo6l.setToolTipText("Only for linked G09-NBO binaries");

        EssGaunbo6.setText("G09- NBO6");
        EssGaunbo6.setToolTipText("Only for compiled NBO6-G09");

        NboKey.setToolTipText("Load or enter NBO keylist");
        jScrollPane1.setViewportView(NboKey);

        jLabel29.setText("Load NBO settings");
        jLabel29.setToolTipText("Loads User setting for frequent usage");

        RunGau.setText("Run");
        RunGau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunGauActionPerformed(evt);
            }
        });

        NboKeys.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DIP, E2PERT", "STER, E2PERT", "NRT", "PLOT files only", "Enter custom", "Set user1" }));
        NboKeys.setToolTipText("Load or enter NBO keylist");
        NboKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NboKeysActionPerformed(evt);
            }
        });

        Ess47only.setText(".47 file only");
        Ess47only.setToolTipText("Let ESS to generate .47 file.");

        jLabel5.setForeground(new java.awt.Color(204, 0, 0));
        jLabel5.setText("NBO keywords");

        jLabel6.setText("Theory");

        jLabel7.setText("Basis set");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("3.");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("5.");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("4.");

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/resources/scan.png"))); // NOI18N
        jLabel11.setText("jLabel11");

        UseInp.setText("Use input Dir");
        UseInp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseInpActionPerformed(evt);
            }
        });

        EssGaunbo3.setText("G03");
        EssGaunbo3.setToolTipText("Will use nbo3");

        PlotProfile.setText("Plot profile");
        PlotProfile.setToolTipText("Opens plot view of energy vs coordinate.");

        jLabel12.setText("Add to Route Card");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(BrowseHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(Directory, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(GauDir, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(OpenDir)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(LoadGauDir))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(UseInp, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel6)
                        .addGap(56, 56, 56)
                        .addComponent(jLabel7)
                        .addGap(88, 88, 88)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8)
                        .addGap(8, 8, 8)
                        .addComponent(EssMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EssBasis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(Comment, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(Basis, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(RouteCard, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(PlotProfile))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel29))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(NboKeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(238, 238, 238)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(168, 168, 168)
                                        .addComponent(EssGaunbo6))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(EssGaunbo3))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(248, 248, 248)
                                        .addComponent(Ess47only))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(EssGaunbo6l))))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(ClearAll)
                                .addGap(99, 99, 99)
                                .addComponent(RunGau)
                                .addGap(99, 99, 99)
                                .addComponent(ExitBn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BrowseHeader)
                    .addComponent(jLabel2))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Directory, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(GauDir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OpenDir)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3))
                    .addComponent(LoadGauDir))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(UseInp, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(EssMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(EssBasis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel12)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(Basis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RouteCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(PlotProfile)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel29)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel5))
                                    .addComponent(NboKeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EssGaunbo6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(EssGaunbo3)
                        .addComponent(jLabel9))
                    .addComponent(Ess47only)
                    .addComponent(EssGaunbo6l))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClearAll)
                    .addComponent(RunGau)
                    .addComponent(ExitBn))
                .addContainerGap())
        );

        jTabbedPane1.addTab("ScanProc", jPanel1);

        linkman.setForeground(new java.awt.Color(0, 0, 255));
        linkman.setText("NboScan manual");
        linkman.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        linkman.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkmanMouseClicked(evt);
            }
        });

        jTextPane1.setText("NboScan module processes Gaussian output files that contain results of Potential Energy Scan (PES) jobs. NboScan extracts essential parts of the output file and creates a number of new gaussian input files (.gjf). The Number of files corresponds to the number of incremental steps in the coordinate scan.  Newly created .gjf files include NBO keylist and instructions to perform NBO analysis at each geometry on the PES.\n\nHow to run:\n\n1. Load the Gaussian output file by clicking button 1. (Browse Dir).\n\n2. Set directory of the new .gjf files to be created or check the box next to \"Use input dir\" to output files next to the input (.out or .lis) files.\n\n3. Set the required level of theory and basis set in section 3.\n\n4. Optionally, enter additional coments.\n\n5. To generate and open graphic representaion of the energy scan, check the box \"Plot profile\".\n\n6. Enter NBO keylist either by typing it directly to the text field or by loading it from selection box (\"Load NBO settings\"). Option \"Set User1\" will store your custom keylist for the next run.\n\n7. In section 5., choose which implementation of ESS-NBO you wish to use. Optionally, select \".47 file only\" to create NBO archive file that can be processed by standalone GENNBO modules.\n\n8. Click Run.\n");
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(linkman)
                        .addGap(160, 160, 160)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(linkman)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Help", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void OpenDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenDirActionPerformed
        chooser = new JFileChooser();
        ExtensionFileFilter filter1 = new ExtensionFileFilter("out, lis", new String[]{"out", "lis"});
        chooser.setFileFilter(filter1);
        File theDirectory = new File(inp_dir);
        chooser.setCurrentDirectory(theDirectory);
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String filename = file.getName();
            String[] temp = filename.split("[.]"); // parse out just the filename
            filename = temp[0];
            suffix = temp[1];
            Filename.setText(filename);

            inp_dir = file.getParent();  //(""+file); // Change File into string
            inp_dir = inp_dir.replace("\\", "/"); //reverse backslashes for Jmol
            Directory.setText(inp_dir);
            Directory.setCaretPosition(0);

        } else {
            System.out.println("Hahhh! Something happened. Just type it in.");
        }
    }//GEN-LAST:event_OpenDirActionPerformed

    private void ExitBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBnActionPerformed
        // Exit and close
        setVisible(false);
        dispose();
    }//GEN-LAST:event_ExitBnActionPerformed

    private void LoadGauDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadGauDirActionPerformed
        chooser1 = new JFileChooser();
        File DirectoryG = new File(path_out);
        chooser1.setCurrentDirectory(DirectoryG);
        // chooser1.setCurrentDirectory(new java.io.File(".")); // uncomment for common jar dir
        chooser1.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // disable the "All files" option.
        chooser1.setAcceptAllFileFilterUsed(false);

        if (chooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file1 = chooser1.getSelectedFile();
            //System.out.println(file1.getAbsolutePath());
            path_out = file1.getAbsolutePath();  //Change path into string
            path_out = path_out.replace("\\", "/"); //reverse backslashes for Jmol
            GauDir.setText(path_out);
            GauDir.setCaretPosition(0);
            //log("Here goes dir: " + path_out); // debug
            //log("Here goes filename: " + file_name); // debug

        } else {
            System.out.println("Hahhh! Something happened. Just type it in.");
        }
    }//GEN-LAST:event_LoadGauDirActionPerformed

    private void ClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllActionPerformed

        OutArea.setText("");
        RouteCard.setText("");
        Comment.setText("");
        NboKey.setText("");
        Method.setText("");
        Basis.setText("");
    }//GEN-LAST:event_ClearAllActionPerformed

    private void EssBasisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EssBasisActionPerformed
        // Variables for basis sets
        baset = EssBasis.getSelectedItem().toString();

        // which basis set
        switch (baset) {
            case "6-31G(d)":
                baset = "6-31G(d)";
                break;
            case "6-311++G(d,p)":
                baset = "6-311++G(d,p)";
                break;
            case "cc-pVTZ":
                baset = "cc-pVTZ";
                break;
            case "aug-cc-pVTZ":
                baset = "aug-cc-pVTZ";
                break;
        }
        Basis.setText(baset);
    }//GEN-LAST:event_EssBasisActionPerformed

    private void EssMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EssMethodActionPerformed
        // Variables for method
        metd = EssMethod.getSelectedItem().toString();

        // which method
        switch (metd) {
            case "HF":
                metd = "HF";
                break;
            case "B3LYP":
                metd = "B3LYP";
                break;
            case "M06-2X":
                metd = "M06-2X";
                break;
            case "wB97XD":
                metd = "wB97XD";
                break;
            case "MP2":
                metd = "MP2";
                break;
    }//GEN-LAST:event_EssMethodActionPerformed
        Method.setText(metd);
    }

    private void RunGauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunGauActionPerformed
        input_gau = Directory.getText();
        input_fname = Filename.getText();
        suffix = "out";
        metd = Method.getText();
        baset = Basis.getText();
        keys = NboKey.getText();

        if (GauDir.getText().isEmpty()) {
            path_out = inp_dir;
            GauDir.setText(inp_dir);
        }
        GauDir.setCaretPosition(0);
        /**
         * call class FileRead and readLines method to save .out lines in an
         * ArrayList[] gauout. Lines of the file are now comma separated.
         */
        ArrayList<String> gauout = new ArrayList<>();
        try {
            gauout = (FileRead.readLinesB(input_gau + "/" + input_fname + "." + suffix));
            //log(gauout);
        } catch (IOException e1) {
            Logger.getLogger(NboScan.class.getName()).log(Level.SEVERE, null, e1);
        }

        if (gauout.size() < 3) {
            String message = "Data file could not be parsed.\nIt is most probably missing.\n";
            String title = "Invalid Entry";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            OutArea.requestFocusInWindow();
            return;
        }

        // ++++++ Now work with the gauout ArrayList
        // retrieve lines and save matching lines in variables
        // 1. Get just line containg the "Scan" keyword
        String coords = ""; // Scanned coordinate
        String coordmatch = "";
        String axisDesc = "";

        for (String coord : gauout) {
            // Go through the ArrayList and extract the name and value of scanned
            // coordinate. It is just one line in the output file
            if (coord.matches("^\\s!.+Scan.+")) {
                getcoord = coord; // Line matching regex
                scanned = getcoord.split("\\s+")[2]; // Label of the coordinate (D5)
                coords = getcoord.split("\\s+")[3]; //Description of the coordinate (D2,1,6,7)
            }
            coordmatch = "\\s!.+" + scanned + ".+"; // build next regex
        }

        //Degug:        
        // log(coordmatch);
        // log("Scanned coordinate -scanned- is: " + scanned);
        // log("Label -coords- is: " + coords);
        //  log("+++++++++++++++++++++");
        if (scanned.length() == 0) {
            String message = "This does not seem to be PES output file.\nNo Scan keyword was found.\n";
            String title = "Invalid Entry";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            OutArea.requestFocusInWindow();
            return;
        }

        // Extract Charge and Multiplicity
        String getchg;
        String charge;
        String multi;
        String chgmulti = "0 1"; // Default
        for (String chg : gauout) {

            if (chg.matches("^\\sCharge.+\\sMultiplicity.+")) {
                getchg = chg; // Line matching regex
                charge = getchg.split("\\s+")[3];
                multi = getchg.split("\\s+")[6];
                chgmulti = charge + " " + multi; // update string
            }
        }

        //log("Charge/Multiplicity -chgmulti- are: " + chgmulti);
        //log("+++++++++++++++++++++");
        // Parse scanned coordinate to axis label
        // Create char Angstrom
        String s = "\\U+00C5";
        // Angstroem Ao in Unicode
        char c = (char) Integer.parseInt(s.substring(2), 16);

        if (coords.matches("^R.+")) {
            axisMatch = "R";
        } else if (coords.matches("^A.+")) {
            axisMatch = "A";
        } else if (coords.matches("^D.+")) {
            axisMatch = "D";
        } else {
            axisMatch = "F";
        }

        switch (axisMatch) {
            case "D":
                axisDesc = "Dihedral " + coords + " (deg)";
                break;
            case "R":
                axisDesc = "Distance " + coords + " " + c;
                break;
            case "A":
                axisDesc = "Angle " + coords + " (deg)";
                break;
            case "F":
                axisDesc = "Scanned coordinate " + coords;
                break;
        }

        // Extract values of coordinate steps
        String outputf[] = new String[gauout.size()];
        outputf = gauout.toArray(outputf); // ArrayList gauout to array,
        // contains all lines in the output file

        // New arrayList 'steps' to capture matching lines
        ArrayList<String> steps = new ArrayList<>();

        for (String str : outputf) {
            if (str.matches(coordmatch) & !str.matches(".+Scan.+")) {
                steps.add(str);
                // log(str);
            }
        }
        // Print captured coordinates as lines
        // for (String lin : steps) {
        // log(lin);
        // }
        // Array to capture coordinate values
        String[] stepVal = new String[steps.size()];
        stepVal = steps.toArray(stepVal);

        // Define new array and arraylist
        String[] arr2 = new String[stepVal.length];
        //   log("Array length -stepVal.length- of coordinate steps: " + stepVal.length);

        // Set rounding parameter based on coordinate
        // Used in fn roundIt
        String rounds = "1";
        switch (axisMatch) {
            case "D":
                rounds = ("1");
                break;
            case "R":
                rounds = ("2");
                break;
            case "A":
                rounds = ("1");
                break;
            case "F":
                rounds = ("1");
                break;
        }
        round = Integer.parseInt(rounds);

        // values contains coordinate steps (0,10,20,30,..)   
        ArrayList<Double> values = new ArrayList<>();
        for (String stepVal1 : stepVal) {
            arr2 = stepVal1.split("\\s+"); // split at spaces
            Double L = Double.parseDouble(arr2[4]);
            L = roundIt(L, round);
            values.add(L); // array to list
        }

        // Print ArrayList values with coordinate values
        //log("\n" + "Here are the coordinate steps -x in values-:");
        // for (Double x : values) {
        //     log(x);
        //}
        // Capture SCF energies <-------------------
        // Extract coordinate steps
        // Capture specific energy lines into new ArrayList ascf
        ArrayList<Double> ascf = new ArrayList<>();

        String energy = "";
        // String[] energies = new String[steps.size()];

        for (String strs : outputf) {
            if (strs.matches("^\\sSCF Done.+")) {
                energy = strs.split("\\s+")[5];
                //     log(energy);
            }

            if (strs.matches("^\\sOptimization completed.+")) {
                ascf.add(Double.parseDouble(energy));
            }
        }

        if (ascf.size() != stepVal.length) {
            String message = "Number of coordinate increments differs from\nnumber of energies. Inspect .out file.\n";
            String title = "Invalid Entry";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            OutArea.requestFocusInWindow();
            return;
        }
        if (ascf.isEmpty()) {
            String message = "This does not seem to be PES output file.\nNo Scan keyword was found.\n";
            String title = "Invalid Entry";
            JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            OutArea.requestFocusInWindow();
            return;
        }

        //   log("\n" + "Number -ascf.size()- of energy matches: " + ascf.size());
        //   log("stepVal.length: " + stepVal.length);
        // Print captured energies as lines
        //     for (Double enval : ascf) {
        //        log(enval);
        //    }
        // Normalize energies
        // Collections.sort(ascf, Collections.reverseOrder()); // sort the list
        // Double max = ascf.get(0); // get the smallest value
        // Double min = ascf.get(ascf.size() - 1); // get the highest value
        // Double maxmindif = (min - max) * 627.51;
        // maxmindif = Math.abs(roundIt(maxmindif, 2)); // Max - Min energy
        // difference
        Double minT = Collections.min(ascf);
        Double maxT = Collections.max(ascf);
        Double maxmindif = (minT - maxT) * 627.51;
        maxmindif = Math.abs(roundIt(maxmindif, 2)); // Max - Min energy

        Double firstEne = minT; // Set min or max to change the sign of rel
        // energies

        ArrayList<Double> ascf1 = runDif(ascf, firstEne);
        //log("\n");
        // log("Relative energies -newval in ascf1- :");
        // for (Double newenval : ascf1) {
        //     log(newenval);
        //    }

        // RawCoordinates extract XYZ coordinates from .out file
        ArrayList<String> rawcoords = new ArrayList<>();
        rawcoords = RawCoords(outputf);

        // Format XYZ
        ArrayList<String> getstructures = new ArrayList<>();
        getstructures = getStructures(rawcoords);

        // Find size of coord chunk;
        int SegmentSize = getstructures.size() / stepVal.length;
       // log("\n" + "Number of atoms -SegmentSize- : " + SegmentSize);

        // NBO selection
        if (EssGaunbo6.isSelected()) {
            nboread = "pop=nbo6read sp nosymm";
        }
        if (EssGaunbo6l.isSelected()) {
            nboread = "external=\"C:\\G09W\\gaunbo6.bat\" POP=NBO6Read sp nosymm";
        }
        if (Ess47only.isSelected()) {
            nboread = "POP=NBORead sp nosymm";
        }
        if (metd.length() == 0) {
            metd = "HF";
        }
        if (baset.length() == 0) {
            metd = "6-31G(d)";
        }

        // Route card
        addToRoute = RouteCard.getText();

// Route card; no incrementing variables
        routecard = "# " + metd + "/" + baset + " " + nboread + " " + addToRoute + "\n";

        // NBO keylist
        String nbo = "$NBO " + keys + " $END" + "\n";

        // Get custom comment
        addComment = Comment.getText();

        // ----------------------------- works
//        log("\n" + "Now trying to break getstructures:");
//           for (String items : getstructures) {
//              log(items);
        //          }
        // Write files
        try {
            int b = 0; // step increment
            int i; // define structure line increment
            int g = 0; // structure line increment variable
            for (int j = 0; j < values.size(); j++) {
                FileWriter fstreamWrite = new FileWriter(path_out + "/" + Filename.getText() + "_" + values.get(b) + "_" + ".gjf");
                try (BufferedWriter out = new BufferedWriter(fstreamWrite)) {
                    out.write("%chk=" + Filename.getText() + "_" + values.get(b) + "_" + ".chk" + "\n");
                    out.write(routecard + "\n");
                    out.write(axisMatch + "_" + values.get(b) + "_" + ", " + Filename.getText() + ", " + metd + "/" + baset + ", " + addComment + "\n\n");
                    out.write(chgmulti + "\n");
                    for (i = g; i < getstructures.size(); i++) {
                        out.write(getstructures.get(i) + "\n");
                        if ((i + 1) % SegmentSize == 0) {
                            out.write("\n");
                            break;
                        }
                    }
                    if (Ess47only.isSelected()) {
                        //int d = b - 1;
                        keys = "archive FILE=" + Filename.getText() + "_" + values.get(b) + "_" + " PRINT=0";
                        nbo = "$NBO " + keys + " $END" + "\n";
                    }
                    if (NboKeys.getSelectedItem().equals("PLOT files only")) {
                        //int d = b - 1;
                        keys = "PLOT FILE=" + Filename.getText() + "_" + values.get(b) + "_" + " PRINT=0";
                        nbo = "$NBO " + keys + " $END" + "\n";
                    }
                    out.write(nbo + "\n");
                    b = b + 1;
                    g = g + SegmentSize;
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(NboScan.class.getName()).log(Level.SEVERE, null, ex);
        }

        //____________ArrayList - alternatively capture all output into an array -works
        ArrayList<String> oneoutput = new ArrayList<>();
        int b = 0;
        oneoutput.add("%chk=" + Filename.getText() + "_" + values.get(b) + "_" + ".chk"); //first route
        oneoutput.add(routecard); //first card
        oneoutput.add(axisMatch + "_" + values.get(b) + "_" + ", " + Filename.getText() + ", " + metd + "/" + baset + ", " + addComment + "\n");
        oneoutput.add(chgmulti);
        b = 1;
        for (int i = 0; i < getstructures.size(); i++) {
            oneoutput.add(getstructures.get(i));
            if ((i + 1) % SegmentSize == 0) {
                if (b < values.size()) {
                    oneoutput.add(""); // blank line
                    if (Ess47only.isSelected()) {
                        int d = b - 1;
                        keys = "archive FILE=" + Filename.getText() + "_" + values.get(d) + "_" + " " + NboKey.getText();
                        nbo = "$NBO " + keys + " $END";
                    }
                    oneoutput.add(nbo);
                    oneoutput.add("\n");
                    oneoutput.add("%chk=" + Filename.getText() + "_" + values.get(b) + "_" + ".chk");
                    oneoutput.add(routecard);
                    oneoutput.add(axisMatch + "_" + values.get(b) + "_" + ", " + Filename.getText() + ", " + Method.getText() + "/" + Basis.getText() + ", " + addComment + "\n");
                    oneoutput.add(chgmulti);
                    b = b + 1;
                }
            }
        }
        oneoutput.add("");
        if (Ess47only.isSelected()) {
            int d = b - 1;
            keys = "archive FILE=" + Filename.getText() + "_" + values.get(d) + "_" + " " + NboKey.getText();
            String nbo1 = "$NBO " + keys + " $END";
            oneoutput.add(nbo1);
        } else {
            oneoutput.add(nbo);
        }

        // -----------------------------
        // Display results
        EmptyBorder eb = new EmptyBorder(new Insets(10, 10, 10, 10));

        OutArea.setBorder(eb);

        OutArea.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        OutArea.setMargin(
                new Insets(2, 2, 2, 2));
        OutArea.setForeground(Color.blue);
        message1 = " Scanned coordinate is:   " + scanned;
        message2 = " Its label in Gau output is:   " + axisDesc;
        message3 = " Number of coordinate steps is:   " + stepVal.length;
        message4 = " There is the total of " + SegmentSize + " atoms per structure.";
        message5 = " Files ' " + Filename.getText() + ".gjf" + "  ' were written into dir:   " + path_out;
        ToOutArea = message1 + "\n" + message2 + "\n" + message3 + "\n" + message4 + "\n\n" + message5;
        OutArea.setText(ToOutArea);
        OutArea.setCaretPosition(0);

        // Plot
        if (PlotProfile.isSelected()) {
            if (values.get(0) > values.get(1)) {
                Collections.sort(values); // if x-axis had decreasing order, it would not plot properly
                //Collections.sort(ascf1, Collections.reverseOrder());
                Collections.reverse(ascf1);
            }
            ChartPanelScan cps = new ChartPanelScan(axisDesc, values, ascf1, maxmindif);
        }
        // Generate Gaussian batch file .bcf
        // regex change slashes to backslashes
        String gjf;
        String out;
        String[] batch = new String[stepVal.length];
        for (int v = 0; v < stepVal.length; v++) {
            gjf = path_out + "/" + Filename.getText() + "_" + values.get(v) + "_" + ".gjf";
            out = Filename.getText() + "_" + values.get(v) + "_" + ".out";
            batch[v] = gjf + ", " + out;
        }
        // path_out + "/" + Filename.getText() + "_" + values.get(b) + "_" + ".gjf"
        FileWriter batchWrite;
        try {
            batchWrite = new FileWriter(path_out + "/" + Filename.getText() + "_batch" + ".bcf");

            try (BufferedWriter batches = new BufferedWriter(batchWrite)) {
                batches.write("!" + "\n");
                batches.write("!User created batch file" + "\n");
                batches.write("!start=1" + "\n");
                batches.write("!" + "\n");
                for (String batch1 : batch) {
                    if (batch1 != null) {
                        batches.write(batch1);
                    }
                    batches.write("\n");
                }
                batches.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(NboScan.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Save fields into xml file for re-use
        // Method Writer takes 6 text inputs
        String id1 = Directory.getText();
        String id2 = Filename.getText();
        String id3 = GauDir.getText();
        String id4 = Comment.getText();
        String id5 = NboKey.getText();
        String id6 = null;
        String id7 = RouteCard.getText();
        if (NboKeys.getSelectedItem().equals("Set user1")) {
            id6 = NboKey.getText();
        } else {
            id6 = user_keys;
        }

        JAXBWriter.Writer(id1, id2, id3, id4, id5, id6, id7);
    }//GEN-LAST:event_RunGauActionPerformed

    private void NboKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NboKeysActionPerformed

// Variables for method
        keys = NboKeys.getSelectedItem().toString();
        // which method
        switch (keys) {
            case "DIP, E2PERT":
                keys = "NBOSUM DIST BNDIDX DIPOLE=0.02 E2PERT=5 PRINT=2";
                break;
            case "STER, E2PERT":
                keys = "STERIC=0.5 DIST E2PERT=5 PRINT=2";
                break;
            case "NRT":
                keys = "NBOSUM NRT DIST BNDIDX PRINT=2";
                break;
            case "PLOT files only":
                keys = "PLOT FILE=" + Filename.getText() + "_i  PRINT=0";
                break;
            case "Enter custom":
                keys = "paste NBO keywords here";
                break;
            case "Set user1":
                keys = user_keys;
                break;
        }
        //NboKey.setText(keys);
        if (NboKeys.getSelectedItem().equals("Set user1")) {
            NboKey.setText(user_keys);
        } else {
            NboKey.setText(keys);
        }

        //EmptyBorder ebo = new EmptyBorder(new Insets(10, 10, 10, 10));
        //NboKey.setBorder(ebo);
        //NboKey.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        NboKey.setMargin(
                new Insets(4, 3, 1, 2)); // top, left, bottom, right

        Color color = new Color(204, 0, 0);
        NboKey.setForeground(color);
        NboKey.setCaretPosition(0);
    }//GEN-LAST:event_NboKeysActionPerformed

    private void UseInpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseInpActionPerformed
        if (UseInp.isSelected()) {
            path_out = inp_dir;
            GauDir.setText(inp_dir);
        } else {
            GauDir.setText(path_out);
        }
        GauDir.setCaretPosition(0);
    }//GEN-LAST:event_UseInpActionPerformed

    private void linkmanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkmanMouseClicked
        // open local file in current directory:

        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File("NboScan_man.pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                String message = "There is no application that can read pdf file";
                String title = "Error";
                JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_linkmanMouseClicked

// PRIVATE METHODS
    private static void log(Object aObject) {
        System.out.println(String.valueOf(aObject));
    }

    // Normalize energies and transform to kcal/mol from a.u.
    private static ArrayList<Double> runDif(ArrayList<Double> ascf, Double zero) {
        ArrayList<Double> ener = new ArrayList<>();
        for (Double x : ascf) {
            Double newener = (x - zero) * 627.51;
            ener.add(roundIt(newener, 3));
        }
        return ener;
    }

    // Round Double
    private static double roundIt(double value, int places) {
        if (places < 0) {
            throw new IllegalArgumentException();
        }

        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(places, RoundingMode.HALF_UP);
        return bd.doubleValue();
    }

    // Get raw XYZ coordinates at each geometry
    private static ArrayList<String> RawCoords(String[] outputf) {
        ArrayList<String> rawlines = new ArrayList<>();
        Boolean opt = false;
        Boolean geo = false;
        ArrayList<String> structure = new ArrayList<>();

        for (String strs : outputf) {
            if (opt == true & geo == true & (!strs.matches(".+----"))) {
                structure.add(strs);
            }

            if (strs.matches(".+\\sCoordinates\\s\\(Angstroms\\)")) {
                if (opt == false) {
                    opt = true;
                    structure.clear();
                }
            }

            if (opt == true & strs.matches(".+-----")) {
                if (geo == false) {
                    geo = true;
                } else if (geo == true) {
                    geo = false;
                    opt = false;
                }
            }
            if (strs.matches("^\\sOptimization completed.+") & opt == false & geo == false) {
                rawlines.addAll(structure);
                structure.clear();
                opt = false;
                geo = false;
            }
        }

        return rawlines;
    }

    // Get structures as XYZ coordinates
    private static ArrayList<String> getStructures(ArrayList<String> rawrecords) {

        ArrayList<String> coordinates = new ArrayList<>();
        for (String rec : rawrecords) {
            String thelin = replace(rec);
            String[] theline = thelin.split("\\s+");
            coordinates.add(String.format("%-3s %15s %15s %15s", theline[0], theline[1],
                    theline[2], theline[3]));
        }
        return coordinates;
    }

    private static String replace(String thelin) {

        String element;
        String replaced;
        element = PeriodicTable(thelin.split("\\s+")[2]);
        replaced = thelin.replaceFirst("^\\s+\\d\\d?\\s+[1-9]{1,2}\\s+\\d\\d?", element);
        return replaced;
    }

    private static String PeriodicTable(String elementnumber) {

        HashMap<String, String> element = new HashMap<>();
        element.put("1", "H");
        element.put("2", "He");
        element.put("3", "Li");
        element.put("4", "Be");
        element.put("5", "B");
        element.put("6", "C");
        element.put("7", "N");
        element.put("8", "O");
        element.put("9", "F");
        element.put("11", "Na");
        element.put("12", "Mg");
        element.put("13", "Al");
        element.put("14", "Si");
        element.put("15", "P");
        element.put("16", "S");
        element.put("17", "Cl");
        element.put("19", "K");
        element.put("20", "Ca");
        element.put("22", "Ti");
        element.put("23", "V");
        element.put("24", "Cr");
        element.put("25", "Mn");
        element.put("26", "Fe");
        element.put("27", "Co");
        element.put("28", "Ni");
        element.put("29", "Cu");
        element.put("30", "Zn");
        element.put("35", "Br");
        element.put("53", "I");

        return element.get(elementnumber);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NboScan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NboScan().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Basis;
    private javax.swing.JLabel BrowseHeader;
    private javax.swing.JButton ClearAll;
    private javax.swing.JTextField Comment;
    private javax.swing.JTextField Directory;
    private javax.swing.JCheckBox Ess47only;
    private javax.swing.JComboBox EssBasis;
    private javax.swing.JCheckBox EssGaunbo3;
    private javax.swing.JCheckBox EssGaunbo6;
    private javax.swing.JCheckBox EssGaunbo6l;
    private javax.swing.JComboBox EssMethod;
    private javax.swing.JButton ExitBn;
    private javax.swing.JTextField Filename;
    private javax.swing.JTextField GauDir;
    private javax.swing.JButton LoadGauDir;
    private javax.swing.JTextField Method;
    private javax.swing.JEditorPane NboKey;
    private javax.swing.JComboBox NboKeys;
    private javax.swing.JButton OpenDir;
    private javax.swing.JEditorPane OutArea;
    private javax.swing.JCheckBox PlotProfile;
    private javax.swing.JTextField RouteCard;
    private javax.swing.JButton RunGau;
    private javax.swing.JCheckBox UseInp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel linkman;
    // End of variables declaration//GEN-END:variables
}
